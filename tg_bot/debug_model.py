import pandas as pd
import joblib
import json
import numpy as np

print("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–û–î–ï–õ–ò ===\n")

# 1. –ó–∞–≥—Ä—É–∑–∏–º –º–æ–¥–µ–ª—å –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –æ–Ω–∞ –æ–∂–∏–¥–∞–µ—Ç
model = joblib.load('models/best_model_lightgbm_clean.pkl')
with open('models/feature_names_clean.json', 'r') as f:
    expected_features = json.load(f)

print(f"1. –ú–û–î–ï–õ–¨ –û–ñ–ò–î–ê–ï–¢ {len(expected_features)} –ü–†–ò–ó–ù–ê–ö–û–í:")
print(f"   –ü–µ—Ä–≤—ã–µ 10: {expected_features[:10]}")
print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10: {expected_features[-10:]}")
print(f"   –¢–∏–ø—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len([f for f in expected_features if 'lag' in f])} –ª–∞–≥–æ–≤, "
      f"{len([f for f in expected_features if 'rolling' in f])} —Å–∫–æ–ª—å–∑—è—â–∏—Ö, "
      f"{len([f for f in expected_features if 'sin' in f or 'cos' in f])} —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö")

# 2. –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–æ—Ç
print(f"\n2. –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–†–ò–ó–ù–ê–ö–û–í –ë–û–¢–û–ú:")

# –ò–º–∏—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–æ—Ç–∞
from datetime import datetime
test_date = datetime(2025, 10, 11)
hour = 3
day_of_week = 5  # –°—É–±–±–æ—Ç–∞
month = 10

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–∞–∫ –≤ –±–æ—Ç–µ
features_dict = {}

# –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
features_dict['hour_sin'] = np.sin(2 * np.pi * hour / 24)
features_dict['hour_cos'] = np.cos(2 * np.pi * hour / 24)
features_dict['month_sin'] = np.sin(2 * np.pi * month / 12)
features_dict['month_cos'] = np.cos(2 * np.pi * month / 12)
features_dict['day_of_week_sin'] = np.sin(2 * np.pi * day_of_week / 7)
features_dict['day_of_week_cos'] = np.cos(2 * np.pi * day_of_week / 7)

# –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
features_dict['is_evening_peak'] = 1 if 18 <= hour <= 22 else 0
features_dict['is_morning_peak'] = 1 if 7 <= hour <= 9 else 0
features_dict['is_night'] = 1 if 0 <= hour <= 5 else 0

# –ë–∞–∑–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ
features_dict['hour'] = hour
features_dict['day_of_week'] = day_of_week
features_dict['month'] = month
features_dict['is_weekend'] = 1 if day_of_week >= 5 else 0

print(f"   –°–æ–∑–¥–∞–Ω–æ {len(features_dict)} –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

# 3. –ó–∞–ø–æ–ª–Ω–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –°–õ–£–ß–ê–ô–ù–´–ú–ò –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–∫–∞–∫ –≤ –±–æ—Ç–µ)
print(f"\n3. –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –û–°–¢–ê–õ–¨–ù–´–• –ü–†–ò–ó–ù–ê–ö–û–í:")

for feature in expected_features:
    if feature not in features_dict:
        if 'lag' in feature:
            features_dict[feature] = 1.2  # –ö–∞–∫ –≤ –±–æ—Ç–µ
        elif 'rolling' in feature:
            features_dict[feature] = 1.2  # –ö–∞–∫ –≤ –±–æ—Ç–µ  
        elif 'ratio' in feature:
            features_dict[feature] = 0.1  # –°–ª—É—á–∞–π–Ω–æ–µ
        else:
            features_dict[feature] = 0.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

print(f"   –í—Å–µ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features_dict)}")

# 4. –°–æ–∑–¥–∞–µ–º DataFrame –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
features_df = pd.DataFrame([features_dict])[expected_features]

# 5. –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
print(f"\n4. –¢–ï–°–¢ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø:")

try:
    prediction = model.predict(features_df, predict_disable_shape_check=True)[0]
    print(f"   ‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {prediction:.3f} –∫–í—Ç")
    
    if prediction > 2.0:
        print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ!")
        print(f"   üí° –ü—Ä–∏—á–∏–Ω–∞: –ú–æ–¥–µ–ª—å –æ–±—É—á–∞–ª–∞—Å—å –Ω–∞ '–∏–¥–µ–∞–ª—å–Ω—ã—Ö' –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö")
        print(f"   üí° –ê –±–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç '—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ' –ø—Ä–∏–∑–Ω–∞–∫–∏")
    else:
        print(f"   ‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ –Ω–æ—Ä–º–µ")
        
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")

print(f"\n5. –í–´–í–û–î:")
print(f"   üéØ –ü–†–û–ë–õ–ï–ú–ê: –†–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É –æ–±—É—á–µ–Ω–∏–µ–º –∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–æ–º")
print(f"   üìö –ú–æ–¥–µ–ª—å –æ–±—É—á–∞–ª–∞—Å—å –Ω–∞ –ü–†–û–ü–£–°–ö–ê–• –∏ –õ–ê–ì–ê–• –∏–∑ –±—É–¥—É—â–µ–≥–æ")
print(f"   ü§ñ –ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –ø—Ä–∏–∑–Ω–∞–∫–∏ –±–µ–∑ —É—Ç–µ—á–µ–∫")
print(f"   üî• –†–µ–∑—É–ª—å—Ç–∞—Ç: –ú–æ–¥–µ–ª—å '—Å–ª–æ–º–∞–Ω–∞' –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")