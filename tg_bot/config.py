import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

# –ê–ë–°–û–õ–Æ–¢–ù–´–ô –ø—É—Ç—å –∫ –º–æ–¥–µ–ª—è–º
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
FEATURE_NAMES_PATH = os.path.join(BASE_DIR, 'models', 'feature_names.json')
MODEL_PATHS = {
    'lightgbm': os.path.join(BASE_DIR, 'models', 'lightgbm_model.pkl'),
    'xgboost': os.path.join(BASE_DIR, 'models', 'xgboost_model.pkl'), 
    'randomforest': os.path.join(BASE_DIR, 'models', 'randomforest_model.pkl')
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
DEFAULT_VALUES = {
    'hour': 12,
    'day_of_week': 2,  # –°—Ä–µ–¥–∞
    'month': 5,        # –ú–∞–π
    'Sub_metering_1': 0.0,
    'Sub_metering_2': 0.0, 
    'Sub_metering_3': 0.0,
    'Global_reactive_power': 0.1,
    'Voltage': 240.0,
    'Global_intensity': 2.5
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_CONFIG = {
    'parse_mode': 'Markdown',
    'timeout': 30
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def check_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"""
    print(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –¢–æ–∫–µ–Ω: {BOT_TOKEN[:15]}...")
    
    available_models = []
    for model_name, model_path in MODEL_PATHS.items():
        if os.path.exists(model_path):
            print(f"‚úÖ {model_name}: –Ω–∞–π–¥–µ–Ω–∞")
            available_models.append(model_name)
        else:
            print(f"‚ùå {model_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ({model_path})")
    
    return available_models

print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –¢–æ–∫–µ–Ω:", BOT_TOKEN[:10] + "..." if BOT_TOKEN else "–ù–ï –ù–ê–ô–î–ï–ù")