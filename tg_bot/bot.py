# import telebot
# import pandas as pd
# import joblib
# import numpy as np
# import matplotlib
# matplotlib.use('Agg')
# import matplotlib.pyplot as plt
# import seaborn as sns
# from datetime import datetime, timedelta
# import os
# import sys
# import io
# import json

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
# sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# from tg_bot.config import BOT_TOKEN, MODEL_PATHS, check_config
# from tg_bot.feature_engineer import FeatureEngineer
# from tg_bot.eda_patterns import HOURLY_PATTERNS

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# plt.style.use('seaborn-v0_8')
# sns.set_palette("husl")

# print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
# available_models = check_config()

# # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FeatureEngineer
# models = {}
# feature_engineer = FeatureEngineer()

# for model_name, model_path in MODEL_PATHS.items():
#     try:
#         if model_name in available_models:
#             models[model_name] = joblib.load(model_path)
#             print(f"‚úÖ {model_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {model_name}: {e}")

# bot = telebot.TeleBot(BOT_TOKEN)

# # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
# models = {}
# for model_name, model_path in MODEL_PATHS.items():
#     try:
#         if model_name in available_models:
#             models[model_name] = joblib.load(model_path)
#             print(f"‚úÖ {model_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
#         else:
#             print(f"‚ùå {model_name} –ø—Ä–æ–ø—É—â–µ–Ω–∞ - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {model_name}: {e}")

# print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")

# def load_feature_names():
#     """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–º–µ–Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
#     try:
#         with open('models/feature_names.json', 'r', encoding='utf-8') as f:
#             feature_names = json.load(f)
#         print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(feature_names)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
#         return feature_names
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
#         return None

# def create_features_from_template(hour, day_of_week, month):
#     """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å –†–ï–ê–õ–¨–ù–´–ú–ò –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –∏–∑ EDA"""
#     feature_names = load_feature_names()
    
#     # –†–ï–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø –ò–ó EDA
#     current_hour_consumption = get_hourly_pattern(hour, 'mean')
#     current_day_consumption = get_daily_pattern(day_of_week, 'mean')
#     current_month_consumption = get_monthly_pattern(month, 'mean')
    
#     base_values = {
#         'Global_reactive_power': 0.1,
#         'Voltage': 240.0,
#         'Global_intensity': 2.5,
#         'Sub_metering_1': 0.0,
#         'Sub_metering_2': 0.0,
#         'Sub_metering_3': 0.0,
#         'hour': hour,
#         'day_of_week': day_of_week,
#         'month': month,
#         'is_weekend': 1 if day_of_week >= 5 else 0,
        
#         # ‚úÖ –†–ï–ê–õ–¨–ù–´–ï –õ–ê–ì–ò –ò–ó EDA
#         'lag_2h_ago': get_hourly_pattern((hour - 2) % 24, 'mean'),
#         'lag_6h_ago': get_hourly_pattern((hour - 6) % 24, 'mean'), 
#         'lag_12h_ago': get_hourly_pattern((hour - 12) % 24, 'mean'),
#         'lag_same_day_24h': current_hour_consumption,  # –í—á–µ—Ä–∞ –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è
#         'lag_week_ago_168h': current_hour_consumption, # –ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥
        
#         # ‚úÖ –†–ï–ê–õ–¨–ù–´–ï –°–ö–û–õ–¨–ó–Ø–©–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò
#         'rolling_mean_3h_past': np.mean([
#             get_hourly_pattern((hour - 1) % 24, 'mean'),
#             get_hourly_pattern((hour - 2) % 24, 'mean'), 
#             get_hourly_pattern((hour - 3) % 24, 'mean')
#         ]),
#         'rolling_mean_24h_past': np.mean(list(HOURLY_PATTERNS['mean'].values())),
#         'rolling_std_24h_past': np.std(list(HOURLY_PATTERNS['mean'].values())),
#         'rolling_mean_7d_past': np.mean(list(WEEKLY_PATTERNS['mean'].values())),
        
#         # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
#         'hour_sin': np.sin(2 * np.pi * hour/24),
#         'hour_cos': np.cos(2 * np.pi * hour/24),
#         'month_sin': np.sin(2 * np.pi * month/12),
#         'month_cos': np.cos(2 * np.pi * month/12),
#         'day_of_week_sin': np.sin(2 * np.pi * day_of_week/7),
#         'day_of_week_cos': np.cos(2 * np.pi * day_of_week/7),
        
#         # ‚úÖ –†–ï–ê–õ–¨–ù–´–ï –ë–ò–ù–ê–†–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò
#         'is_early_morning': 1 if 4 <= hour <= 6 else 0,
#         'is_midday': 1 if 10 <= hour <= 16 else 0,
#         'is_evening_peak': 1 if 18 <= hour <= 22 else 0,
#         'is_morning_peak': 1 if 7 <= hour <= 9 else 0,
#         'is_night': 1 if is_night_hour(hour) else 0,
#         'is_deep_night': 1 if 1 <= hour <= 4 else 0,
        
#         # ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò –ù–ê –û–°–ù–û–í–ï EDA
#         'is_week_start': 1 if day_of_week in [0, 1] else 0,  # –ü–Ω-–í—Ç
#         'is_week_end': 1 if day_of_week in [4, 5] else 0,    # –ü—Ç-–°–±
#         'is_high_season': 1 if month in [1, 2, 12] else 0,   # –ó–∏–º–∞
#         'is_low_season': 1 if month in [6, 7, 8] else 0,     # –õ–µ—Ç–æ
#     }
    
#     # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
#     features = {}
#     for feature_name in feature_names:
#         if feature_name in base_values:
#             features[feature_name] = base_values[feature_name]
#         elif 'is_' in feature_name or 'peak' in feature_name or 'night' in feature_name:
#             features[feature_name] = 0
#         elif 'ratio' in feature_name:
#             features[feature_name] = 0.0
#         else:
#             features[feature_name] = 0.0
    
#     # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–ª—è —Å—É–±-—Å—á–µ—Ç—á–∏–∫–æ–≤
#     total_sub = features.get('Sub_metering_1', 0) + features.get('Sub_metering_2', 0) + features.get('Sub_metering_3', 0)
#     if 'kitchen_ratio' in features:
#         features['kitchen_ratio'] = features.get('Sub_metering_1', 0) / (total_sub + 0.001)
#     if 'laundry_ratio' in features:
#         features['laundry_ratio'] = features.get('Sub_metering_2', 0) / (total_sub + 0.001)
#     if 'ac_heating_ratio' in features:
#         features['ac_heating_ratio'] = features.get('Sub_metering_3', 0) / (total_sub + 0.001)
    
#     print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –†–ï–ê–õ–¨–ù–´–ú–ò EDA –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏")
#     return pd.DataFrame([features])

# def scale_predictions_to_reality(prediction, hour):
#     """–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –∫ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –Ω–∞ –æ—Å–Ω–æ–≤–µ EDA"""
#     target_pattern = {
#         0: 0.78, 1: 0.63, 2: 0.54, 3: 0.52, 4: 0.49, 5: 0.53,
#         6: 0.94, 7: 1.52, 8: 1.49, 9: 1.34, 10: 1.20, 11: 1.10,
#         12: 1.05, 13: 1.00, 14: 1.04, 15: 1.00, 16: 0.95, 17: 1.07,
#         18: 1.50, 19: 2.07, 20: 2.07, 21: 2.18, 22: 1.67, 23: 1.08
#     }
    
#     target = target_pattern.get(hour, 1.0)
    
#     if prediction < 0.5:
#         scaled_prediction = target * 0.8
#     else:
#         scale_factor = target / 1.0
#         scaled_prediction = prediction * scale_factor
    
#     return max(0.1, min(3.0, scaled_prediction))

# def generate_tomorrow_predictions():
#     """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (24 —á–∞—Å–∞)"""
#     tomorrow = datetime.now() + timedelta(days=1)
#     day_of_week = tomorrow.weekday()
#     month = tomorrow.month
    
#     model_name = 'lightgbm' if 'lightgbm' in models else list(models.keys())[0]
#     model = models[model_name]
    
#     predictions = []
#     hours = []
    
#     print(f"üîç –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {tomorrow.strftime('%d.%m.%Y')} ({['–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±','–í—Å'][day_of_week]})")
    
#     for hour in range(24):
#         features_df = create_features_from_template(hour, day_of_week, month)
        
#         try:
#             prediction = model.predict(features_df)[0]
#             scaled_prediction = scale_predictions_to_reality(prediction, hour)
            
#             predictions.append(scaled_prediction)
#             hours.append(hour)
#             print(f"   –ß–∞—Å {hour:2d}: {scaled_prediction:.3f} –∫–í—Ç (–∏—Å—Ö–æ–¥–Ω—ã–π: {prediction:.3f} –∫–í—Ç)")
#         except Exception as e:
#             print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–µ –¥–ª—è —á–∞—Å–∞ {hour}: {e}")
#             if 0 <= hour <= 5: base_consumption = 0.5
#             elif 7 <= hour <= 9: base_consumption = 1.5  
#             elif 18 <= hour <= 22: base_consumption = 2.0
#             else: base_consumption = 1.0
#             predictions.append(base_consumption)
#             hours.append(hour)

#     print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ä–µ–¥–Ω–µ–µ: {np.mean(predictions):.3f} –∫–í—Ç")
#     return hours, predictions, model_name, day_of_week, month

# def create_tomorrow_plot(hours, predictions, model_name, date_str):
#     """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
#     plt.style.use('seaborn-v0_8')
#     fig, ax = plt.subplots(figsize=(12, 6))
    
#     # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
#     ax.plot(hours, predictions, linewidth=3, alpha=0.8, color='#2E86AB', 
#             marker='o', markersize=4, label='–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏')
    
#     # –ó–æ–Ω—ã –ø–∏–∫–æ–≤
#     ax.axvspan(7, 9, alpha=0.2, color='#F9C74F', label='–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–∫ 7:00-9:00')
#     ax.axvspan(18, 22, alpha=0.2, color='#F94144', label='–í–µ—á–µ—Ä–Ω–∏–π –ø–∏–∫ 18:00-22:00')
#     ax.axvspan(0, 5, alpha=0.2, color='#577590', label='–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è 0:00-5:00')
    
#     # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
#     ax.set_xlabel('–ß–∞—Å –¥–Ω—è', fontsize=12, fontweight='bold')
#     ax.set_ylabel('–ù–∞–≥—Ä—É–∑–∫–∞ (–∫–í—Ç)', fontsize=12, fontweight='bold')
#     ax.set_title(f'–ü—Ä–æ–≥–Ω–æ–∑ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –Ω–∞ {date_str}', 
#                 fontsize=14, fontweight='bold', pad=20)
    
#     # –°–µ—Ç–∫–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
#     ax.grid(True, alpha=0.3, linestyle='--')
#     ax.legend(loc='upper right', framealpha=0.9)
#     ax.set_xticks(range(0, 24, 2))
#     ax.set_xlim(0, 23)
    
#     # –í—ã–¥–µ–ª—è–µ–º –ø–∏–∫
#     max_idx = np.argmax(predictions)
#     ax.plot(max_idx, predictions[max_idx], 'ro', markersize=8)
#     ax.text(max_idx, predictions[max_idx] + 0.2, 
#            f'–ü–∏–∫: {predictions[max_idx]:.2f} –∫–í—Ç', 
#            ha='center', fontweight='bold', fontsize=10)
    
#     plt.tight_layout()
    
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
#     buf = io.BytesIO()
#     plt.savefig(buf, format='png', dpi=120, bbox_inches='tight', 
#                 facecolor='white', edgecolor='none')
#     buf.seek(0)
#     plt.close(fig)
    
#     return buf

# def calculate_metrics(predictions):
#     """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
#     return {
#         'min': np.min(predictions),
#         'max': np.max(predictions),
#         'mean': np.mean(predictions),
#         'total': np.sum(predictions),
#         'morning_peak': np.mean(predictions[7:10]),
#         'evening_peak': np.mean(predictions[18:23]),
#         'night': np.mean(predictions[0:6])
#     }

# @bot.message_handler(commands=['start'])
# def send_welcome(message):
#     """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑–∞"""
#     markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
#     markup.add('üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
#     markup.add('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–µ–π', '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
    
#     welcome_text = """
# ü§ñ *–ë–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è*

# –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"* —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 24 —á–∞—Å–∞.

# *–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞:* 92.4%
# *–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å:* LightGBM
#     """
    
#     bot.send_message(message.chat.id, welcome_text, 
#                    reply_markup=markup, parse_mode='Markdown')

# @bot.message_handler(commands=['help'])
# def send_help(message):
#     """–ü–æ–º–æ—â—å"""
#     help_text = """
# ‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*

# –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

# *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
# 1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
# 2. –ü–æ–ª—É—á–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∏ –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏

# *–ú–æ–¥–µ–ª–∏:*
# ‚Ä¢ LightGBM - 92.4% —Ç–æ—á–Ω–æ—Å—Ç–∏
# ‚Ä¢ XGBoost - 92.2% —Ç–æ—á–Ω–æ—Å—Ç–∏  
# ‚Ä¢ RandomForest - 90.6% —Ç–æ—á–Ω–æ—Å—Ç–∏

# *–î–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è:*
# 6 –º–µ—Å—è—Ü–µ–≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
#     """
#     bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

# @bot.message_handler(commands=['stats'])
# def send_stats(message):
#     """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–µ–π"""
#     stats_text = """
# üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–µ–π*

# *LightGBM* üöÄ (–æ—Å–Ω–æ–≤–Ω–∞—è)
# ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: 92.4%
# ‚Ä¢ –û—à–∏–±–∫–∞: 0.11 –∫–í—Ç
# ‚Ä¢ –û–±—É—á–µ–Ω–∞ –Ω–∞ 260k+ –∑–∞–ø–∏—Å—è—Ö

# *XGBoost* ‚ö°
# ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: 92.2%
# ‚Ä¢ –û—à–∏–±–∫–∞: 0.11 –∫–í—Ç

# *RandomForest* üå≤
# ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: 90.6%
# ‚Ä¢ –û—à–∏–±–∫–∞: 0.12 –∫–í—Ç

# –í—Å–µ –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã –Ω–∞ 6-–º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –º–∏–Ω—É—Ç–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º.
#     """
#     bot.send_message(message.chat.id, stats_text, parse_mode='Markdown')

# @bot.message_handler(func=lambda message: True)
# def handle_all_messages(message):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫"""
#     if message.text == 'üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞':
#         generate_tomorrow_prediction(message)
#     elif message.text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–µ–π':
#         send_stats(message)
#     elif message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
#         send_help(message)
#     else:
#         send_welcome(message)

# def generate_tomorrow_prediction(message):
#     """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
#     try:
#         bot.send_message(message.chat.id, "‚è≥ *–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞...*", parse_mode='Markdown')
        
#         # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
#         hours, predictions, model_name, day_of_week, month = generate_tomorrow_predictions()
#         metrics = calculate_metrics(predictions)
        
#         # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
#         tomorrow = datetime.now() + timedelta(days=1)
#         date_str = tomorrow.strftime('%d.%m.%Y')
        
#         # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –° –î–ê–¢–û–ô
#         plot_buf = create_tomorrow_plot(hours, predictions, model_name, date_str)
        
#         # –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –∏ –º–µ—Å—è—Ü–µ–≤
#         day_names = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü—É", "—Å—É–±–±–æ—Ç—É", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
#         month_names = ["", "—è–Ω–≤–∞—Ä–µ", "—Ñ–µ–≤—Ä–∞–ª–µ", "–º–∞—Ä—Ç–µ", "–∞–ø—Ä–µ–ª–µ", "–º–∞–µ", "–∏—é–Ω–µ", 
#                       "–∏—é–ª–µ", "–∞–≤–≥—É—Å—Ç–µ", "—Å–µ–Ω—Ç—è–±—Ä–µ", "–æ–∫—Ç—è–±—Ä–µ", "–Ω–æ—è–±—Ä–µ", "–¥–µ–∫–∞–±—Ä–µ"]
        
#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô - —É–±—Ä–∞–ª –ª–∏—à–Ω–∏–µ –∑–≤–µ–∑–¥–æ—á–∫–∏)
#         metrics_text = f"""üìä *–ü–†–û–ì–ù–û–ó –ù–ê –ó–ê–í–¢–†–ê* ({day_names[day_of_week].capitalize()}, {month_names[month]})

# *–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:*
# ‚Ä¢ üéØ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞: {metrics['mean']:.2f} –∫–í—Ç
# ‚Ä¢ üìà –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {metrics['max']:.2f} –∫–í—Ç
# ‚Ä¢ üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {metrics['min']:.2f} –∫–í—Ç
# ‚Ä¢ üîã –°—É–º–º–∞—Ä–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {metrics['total']:.2f} –∫–í—Ç¬∑—á

# *–ü–∏–∫–æ–≤—ã–µ –ø–µ—Ä–∏–æ–¥—ã:*
# ‚Ä¢ üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–∫ (7-9): {metrics['morning_peak']:.2f} –∫–í—Ç
# ‚Ä¢ üåá –í–µ—á–µ—Ä–Ω–∏–π –ø–∏–∫ (18-22): {metrics['evening_peak']:.2f} –∫–í—Ç 
# ‚Ä¢ üåô –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (0-5): {metrics['night']:.2f} –∫–í—Ç

# üí° *–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: 92.4%*
# ü§ñ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name.upper()}*"""
        
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ –º–µ—Ç—Ä–∏–∫–∏
#         bot.send_photo(message.chat.id, plot_buf, caption=metrics_text, parse_mode='Markdown')
        
#         # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
#         markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
#         markup.add('üìä –ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑', 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        
#         bot.send_message(
#             message.chat.id,
#             "üîÑ *–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø—Ä–æ–≥–Ω–æ–∑?*",
#             reply_markup=markup,
#             parse_mode='Markdown'
#         )
        
#     except Exception as e:
#         error_text = f"""‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞*

# –û—à–∏–±–∫–∞: {str(e)}

# –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
#         bot.send_message(message.chat.id, error_text, parse_mode='Markdown')
#         print(f"Error in generate_tomorrow_prediction: {e}")

# def main():
#     """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
#     print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è...")
#     print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
#     print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
#     try:
#         bot.infinity_polling()
#     except Exception as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")

# if __name__ == "__main__":
#     main()



# bot.py
import telebot
import pandas as pd
import joblib
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import io
import json
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = telebot.TeleBot(BOT_TOKEN)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ –ø—Ä–∏–∑–Ω–∞–∫–∏
model = joblib.load('models/lightgbm_model.pkl')
with open('models/feature_names.json', 'r', encoding='utf-8') as f:
    FEATURE_NAMES = json.load(f)

print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –û–∂–∏–¥–∞–µ—Ç {len(FEATURE_NAMES)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

def create_prediction_features(hour, day_of_week, month):
    """–°–æ–∑–¥–∞–µ—Ç –í–°–ï 49 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –¢–û–ß–ù–û–ú –ø–æ—Ä—è–¥–∫–µ –∫–∞–∫ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏"""
    
    features = {}
    
    # 1. –¶–ò–ö–õ–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ó–ù–ê–ö–ò
    features['hour_sin'] = np.sin(2 * np.pi * hour / 24)
    features['hour_cos'] = np.cos(2 * np.pi * hour / 24)
    features['month_sin'] = np.sin(2 * np.pi * month / 12)
    features['month_cos'] = np.cos(2 * np.pi * month / 12)
    features['day_of_week_sin'] = np.sin(2 * np.pi * day_of_week / 7)
    features['day_of_week_cos'] = np.cos(2 * np.pi * day_of_week / 7)
    
    # 2. –í–†–ï–ú–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´
    features['is_early_morning'] = 1 if 4 <= hour <= 6 else 0
    features['is_midday'] = 1 if 10 <= hour <= 16 else 0
    features['is_late_evening'] = 1 if 21 <= hour <= 23 else 0
    features['is_evening_peak'] = 1 if 18 <= hour <= 22 else 0
    features['is_morning_peak'] = 1 if 7 <= hour <= 9 else 0
    features['is_night'] = 1 if 0 <= hour <= 5 else 0
    features['is_deep_night'] = 1 if 1 <= hour <= 4 else 0
    
    # 3. –î–ù–ò –ù–ï–î–ï–õ–ò
    features['is_monday'] = 1 if day_of_week == 0 else 0
    features['is_friday'] = 1 if day_of_week == 4 else 0
    features['is_sunday'] = 1 if day_of_week == 6 else 0
    features['is_week_start'] = 1 if day_of_week in [0, 1] else 0
    features['is_week_end'] = 1 if day_of_week in [4, 5] else 0
    features['weekend_evening_boost'] = 1 if (day_of_week >= 5 and 18 <= hour <= 22) else 0
    features['weekend_morning'] = 1 if (day_of_week >= 5 and 7 <= hour <= 9) else 0
    
    # 4. –°–ï–ó–û–ù–ù–´–ï
    features['is_high_season'] = 1 if month in [1, 2, 12] else 0  # –ó–∏–º–∞
    features['is_low_season'] = 1 if month in [6, 7, 8] else 0    # –õ–µ—Ç–æ
    features['is_spring'] = 1 if month in [3, 4, 5] else 0
    
    # 5. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–ï–†–ï–•–û–î–´
    features['morning_surge_6_7'] = 1 if 6 <= hour <= 7 else 0
    features['evening_surge_17_18'] = 1 if 17 <= hour <= 18 else 0
    features['evening_drop_22_23'] = 1 if 22 <= hour <= 23 else 0
    
    # 6. –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø
    features['winter_evening'] = 1 if (month in [1, 2, 12] and 18 <= hour <= 22) else 0
    features['summer_afternoon'] = 1 if (month in [6, 7, 8] and 10 <= hour <= 16) else 0
    features['workday_evening'] = 1 if (day_of_week < 5 and 18 <= hour <= 22) else 0
    features['sunday_evening'] = 1 if (day_of_week == 6 and 18 <= hour <= 22) else 0
    
    # 7. –õ–ê–ì–ò (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —á–∞—Å–∞–º)
    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –Ω–æ—á—å=0.5, —É—Ç—Ä–æ=1.5, –¥–µ–Ω—å=1.0, –≤–µ—á–µ—Ä=2.0
    base_consumption = 1.0
    if 0 <= hour <= 5: base_consumption = 0.5
    elif 7 <= hour <= 9: base_consumption = 1.5  
    elif 18 <= hour <= 22: base_consumption = 2.0
    
    features['lag_same_day_24h'] = base_consumption
    features['lag_week_ago_168h'] = base_consumption
    features['lag_2h_ago'] = base_consumption
    features['lag_6h_ago'] = base_consumption
    features['lag_12h_ago'] = base_consumption
    
    # 8. –°–ö–û–õ–¨–ó–Ø–©–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò
    features['rolling_mean_24h_past'] = base_consumption
    features['rolling_std_24h_past'] = 0.5
    features['rolling_mean_7d_past'] = base_consumption
    features['rolling_mean_3h_past'] = base_consumption
    
    # 9. –°–£–ë-–°–ß–ï–¢–ß–ò–ö–ò
    features['kitchen_ratio'] = 0.2 if (7 <= hour <= 9 or 18 <= hour <= 20) else 0.05
    features['laundry_ratio'] = 0.1 if (10 <= hour <= 18 and day_of_week >= 5) else 0.02
    features['ac_heating_ratio'] = 0.3 if (18 <= hour <= 22 and month in [1, 2, 12]) else 0.1
    
    features['kitchen_active'] = 1 if (7 <= hour <= 9 or 18 <= hour <= 20) else 0
    features['laundry_active'] = 1 if (10 <= hour <= 18 and day_of_week >= 5) else 0
    features['ac_heating_active'] = 1 if (18 <= hour <= 22 and month in [1, 2, 12]) else 0
    
    # 10. –ë–ê–ó–û–í–´–ï –ü–†–ò–ó–ù–ê–ö–ò
    features['hour'] = hour
    features['day_of_week'] = day_of_week
    features['month'] = month
    features['is_weekend'] = 1 if day_of_week >= 5 else 0
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –≤ –¢–û–ß–ù–û–ú –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    ordered_features = {name: features[name] for name in FEATURE_NAMES}
    return pd.DataFrame([ordered_features])

def predict_24_hours():
    """–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞"""
    tomorrow = datetime.now() + timedelta(days=1)
    day_of_week = tomorrow.weekday()
    month = tomorrow.month
    
    predictions = []
    
    for hour in range(24):
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Å–∞
        features_df = create_prediction_features(hour, day_of_week, month)
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º
        prediction = model.predict(features_df)[0]
        prediction = max(0.1, min(5.0, prediction))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        
        predictions.append(prediction)
        print(f"–ß–∞—Å {hour:2d}: {prediction:.2f} –∫–í—Ç")
    
    return list(range(24)), predictions, day_of_week, month

def create_plot(hours, predictions, date_str):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    plt.figure(figsize=(12, 6))
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
    plt.plot(hours, predictions, 'b-', linewidth=3, marker='o', markersize=4)
    
    # –ó–æ–Ω—ã –ø–∏–∫–æ–≤
    plt.axvspan(7, 9, alpha=0.2, color='orange', label='–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–∫')
    plt.axvspan(18, 22, alpha=0.2, color='red', label='–í–µ—á–µ—Ä–Ω–∏–π –ø–∏–∫')
    plt.axvspan(0, 5, alpha=0.2, color='blue', label='–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è')
    
    plt.title(f'–ü—Ä–æ–≥–Ω–æ–∑ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –Ω–∞ {date_str}', fontsize=14, fontweight='bold')
    plt.xlabel('–ß–∞—Å –¥–Ω—è')
    plt.ylabel('–ù–∞–≥—Ä—É–∑–∫–∞ (–∫–í—Ç)')
    plt.grid(True, alpha=0.3)
    plt.legend()
    plt.xticks(range(0, 24, 2))
    
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
    buf.seek(0)
    plt.close()
    
    return buf

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = """
ü§ñ *–ë–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è*

*–ö–æ–º–∞–Ω–¥—ã:*
/predict - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (24 —á–∞—Å–∞)
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–µ–π

*–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:* 92.4%
*–ú–æ–¥–µ–ª—å:* LightGBM
    """
    bot.send_message(message.chat.id, welcome_text, parse_mode='Markdown')

@bot.message_handler(commands=['predict'])
def send_prediction(message):
    try:
        bot.send_message(message.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞...")
        
        hours, predictions, day_of_week, month = predict_24_hours()
        
        tomorrow = datetime.now() + timedelta(days=1)
        date_str = tomorrow.strftime('%d.%m.%Y')
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plot_buf = create_plot(hours, predictions, date_str)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        avg = np.mean(predictions)
        peak = np.max(predictions)
        peak_hour = hours[np.argmax(predictions)]
        total = np.sum(predictions)
        
        day_names = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü—É", "—Å—É–±–±–æ—Ç—É", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        
        caption = f"""üìä *–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {date_str}* ({day_names[day_of_week]})

*–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:*
‚Ä¢ üìà –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞: {avg:.2f} –∫–í—Ç
‚Ä¢ üöÄ –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {peak:.2f} –∫–í—Ç –≤ {peak_hour}:00
‚Ä¢ üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {np.min(predictions):.2f} –∫–í—Ç
‚Ä¢ üîã –°—É–º–º–∞—Ä–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {total:.1f} –∫–í—Ç¬∑—á

*–ú–æ–¥–µ–ª—å:* LightGBM (92.4% —Ç–æ—á–Ω–æ—Å—Ç—å)"""
        
        bot.send_photo(message.chat.id, plot_buf, caption=caption, parse_mode='Markdown')
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['stats'])
def send_stats(message):
    stats_text = """
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏*

*LightGBM*
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å (R¬≤): 92.4%
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ (MAE): 0.11 –∫–í—Ç
‚Ä¢ –û–±—É—á–µ–Ω–∞ –Ω–∞: 260,640 –∑–∞–ø–∏—Å—è—Ö
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: 49

*–î–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è:*
‚Ä¢ –ü–µ—Ä–∏–æ–¥: 6 –º–µ—Å—è—Ü–µ–≤ (—è–Ω–≤–∞—Ä—å-–∏—é–Ω—å 2007)
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: 1 –º–∏–Ω—É—Ç–∞
‚Ä¢ –û–±—ä–µ–º: 260k+ –∏–∑–º–µ—Ä–µ–Ω–∏–π
    """
    bot.send_message(message.chat.id, stats_text, parse_mode='Markdown')

if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã /predict")
    bot.infinity_polling()