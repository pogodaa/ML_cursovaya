import telebot
import pandas as pd
import joblib
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import os
import sys
import io
import json
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è matplotlib
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
load_dotenv(os.path.join(os.path.dirname(__file__), '..', '.env'))

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from tg_bot.config import BOT_TOKEN, MODEL_PATHS, check_config

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
available_models = check_config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
models = {}
for model_name, model_path in MODEL_PATHS.items():
    try:
        if model_name in available_models:
            models[model_name] = joblib.load(model_path)
            print(f"‚úÖ {model_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        else:
            print(f"‚ùå {model_name} –ø—Ä–æ–ø—É—â–µ–Ω–∞ - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {model_name}: {e}")

print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")

def load_feature_names():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–º–µ–Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open('models/feature_names.json', 'r', encoding='utf-8') as f:
            feature_names = json.load(f)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(feature_names)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
        return feature_names
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
        return None
    

def create_features_from_template(hour, day_of_week, month):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ —à–∞–±–ª–æ–Ω—É –∏–∑ –æ–±—É—á–µ–Ω–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    feature_names = load_feature_names()
    
    # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    base_values = {
        'Global_reactive_power': 0.1,
        'Voltage': 240.0,
        'Global_intensity': 2.5,
        'Sub_metering_1': 0.0,
        'Sub_metering_2': 0.0,
        'Sub_metering_3': 0.0,
        'hour': hour,
        'day_of_week': day_of_week,
        'month': month,
        'is_weekend': 1 if day_of_week >= 5 else 0,
        
        # –õ–∞–≥–∏ –∏ —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        'lag_2h_ago': 1.0, 'lag_6h_ago': 1.0, 'lag_12h_ago': 1.0,
        'lag_same_day_24h': 1.0, 'lag_week_ago_168h': 1.0,
        'rolling_mean_3h_past': 1.0, 'rolling_mean_24h_past': 1.0,
        'rolling_std_24h_past': 0.5, 'rolling_mean_7d_past': 1.0,
        
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        'hour_sin': np.sin(2 * np.pi * hour/24),
        'hour_cos': np.cos(2 * np.pi * hour/24),
        'month_sin': np.sin(2 * np.pi * month/12),
        'month_cos': np.cos(2 * np.pi * month/12),
        'day_of_week_sin': np.sin(2 * np.pi * day_of_week/7),
        'day_of_week_cos': np.cos(2 * np.pi * day_of_week/7),
    }
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    features = {}
    for feature_name in feature_names:
        if feature_name in base_values:
            features[feature_name] = base_values[feature_name]
        elif 'is_' in feature_name or 'peak' in feature_name or 'night' in feature_name:
            # –î–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
            features[feature_name] = 0
        elif 'ratio' in feature_name:
            # –î–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
            features[feature_name] = 0.0
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            features[feature_name] = 0.0
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–ª—è —Å—É–±-—Å—á–µ—Ç—á–∏–∫–æ–≤
    total_sub = features.get('Sub_metering_1', 0) + features.get('Sub_metering_2', 0) + features.get('Sub_metering_3', 0)
    if 'kitchen_ratio' in features:
        features['kitchen_ratio'] = features.get('Sub_metering_1', 0) / (total_sub + 0.001)
    if 'laundry_ratio' in features:
        features['laundry_ratio'] = features.get('Sub_metering_2', 0) / (total_sub + 0.001)
    if 'ac_heating_ratio' in features:
        features['ac_heating_ratio'] = features.get('Sub_metering_3', 0) / (total_sub + 0.001)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É")
    return pd.DataFrame([features])


def generate_tomorrow_predictions():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (24 —á–∞—Å–∞)"""
    tomorrow = datetime.now() + timedelta(days=1)
    day_of_week = tomorrow.weekday()
    month = tomorrow.month
    
    model_name = 'lightgbm' if 'lightgbm' in models else list(models.keys())[0]
    model = models[model_name]
    
    predictions = []
    hours = []
    
    print(f"üîç –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {tomorrow.strftime('%d.%m.%Y')} ({['–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±','–í—Å'][day_of_week]})")
    
    for hour in range(24):
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ
        features_df = create_features_from_template(hour, day_of_week, month)
        
        try:
            prediction = model.predict(features_df)[0]
            predictions.append(prediction)
            hours.append(hour)
            print(f"   –ß–∞—Å {hour:2d}: {prediction:.3f} –∫–í—Ç")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–µ –¥–ª—è —á–∞—Å–∞ {hour}: {e}")
            # Fallback –∑–Ω–∞—á–µ–Ω–∏—è
            base_consumption = 1.0
            if 0 <= hour <= 5: base_consumption = 0.5
            elif 7 <= hour <= 9: base_consumption = 1.5  
            elif 18 <= hour <= 22: base_consumption = 2.0
            predictions.append(base_consumption)
            hours.append(hour)
    
    print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ä–µ–¥–Ω–µ–µ: {np.mean(predictions):.3f} –∫–í—Ç")
    return hours, predictions, model_name, day_of_week, month


def generate_tomorrow_prediction(message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    try:
        bot.send_message(message.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        hours, predictions, model_name, day_of_week, month = generate_tomorrow_predictions()
        metrics = calculate_metrics(predictions)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plot_buf = create_tomorrow_plot(hours, predictions, model_name)
        
        # –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –∏ –º–µ—Å—è—Ü–µ–≤
        day_names = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü—É", "—Å—É–±–±–æ—Ç—É", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        month_names = ["", "—è–Ω–≤–∞—Ä–µ", "—Ñ–µ–≤—Ä–∞–ª–µ", "–º–∞—Ä—Ç–µ", "–∞–ø—Ä–µ–ª–µ", "–º–∞–µ", "–∏—é–Ω–µ", 
                      "–∏—é–ª–µ", "–∞–≤–≥—É—Å—Ç–µ", "—Å–µ–Ω—Ç—è–±—Ä–µ", "–æ–∫—Ç—è–±—Ä–µ", "–Ω–æ—è–±—Ä–µ", "–¥–µ–∫–∞–±—Ä–µ"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ (–ë–ï–ó Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫)
        metrics_text = f"""
üìä –ü–†–û–ì–ù–û–ó –ù–ê –ó–ê–í–¢–†–ê ({day_names[day_of_week].capitalize()}, {month_names[month]})

–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
‚Ä¢ üéØ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞: {metrics['mean']:.2f} –∫–í—Ç
‚Ä¢ üìà –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {metrics['max']:.2f} –∫–í—Ç  
‚Ä¢ üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {metrics['min']:.2f} –∫–í—Ç
‚Ä¢ üîã –°—É–º–º–∞—Ä–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {metrics['total']:.2f} –∫–í—Ç¬∑—á

–ü–∏–∫–æ–≤—ã–µ –ø–µ—Ä–∏–æ–¥—ã:
‚Ä¢ üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–∫ (7-9): {metrics['morning_peak']:.2f} –∫–í—Ç
‚Ä¢ üåá –í–µ—á–µ—Ä–Ω–∏–π –ø–∏–∫ (18-22): {metrics['evening_peak']:.2f} –∫–í—Ç
‚Ä¢ üåô –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (0-5): {metrics['night']:.2f} –∫–í—Ç

üí° –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: 92.4%
ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name.upper()}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ –º–µ—Ç—Ä–∏–∫–∏ (–ë–ï–ó parse_mode)
        bot.send_photo(message.chat.id, plot_buf, caption=metrics_text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('üìä –ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑', 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        
        bot.send_message(
            message.chat.id,
            "üîÑ –•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø—Ä–æ–≥–Ω–æ–∑?",
            reply_markup=markup
        )
        
    except Exception as e:
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –±–µ–∑ Markdown
        error_text = f"""
‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞

–û—à–∏–±–∫–∞: {str(e)}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
        """
        bot.send_message(message.chat.id, error_text)
        print(f"Error in generate_tomorrow_prediction: {e}")

def create_tomorrow_plot(hours, predictions, model_name):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    fig, ax = plt.subplots(figsize=(12, 6))
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
    ax.plot(hours, predictions, linewidth=3, alpha=0.8, color='blue', label='–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏')
    
    # –ó–æ–Ω—ã –ø–∏–∫–æ–≤
    ax.axvspan(7, 9, alpha=0.2, color='orange', label='–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–∫')
    ax.axvspan(18, 22, alpha=0.2, color='red', label='–í–µ—á–µ—Ä–Ω–∏–π –ø–∏–∫')
    ax.axvspan(0, 5, alpha=0.2, color='blue', label='–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è')
    
    ax.set_xlabel('–ß–∞—Å –¥–Ω—è', fontsize=12)
    ax.set_ylabel('–ù–∞–≥—Ä—É–∑–∫–∞ (–∫–í—Ç)', fontsize=12)
    ax.set_title('–ü—Ä–æ–≥–Ω–æ–∑ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞', fontsize=14, fontweight='bold')
    ax.grid(True, alpha=0.3)
    ax.legend()
    ax.set_xticks(range(0, 24, 2))
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
    buf.seek(0)
    plt.close()
    
    return buf

def calculate_metrics(predictions):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    return {
        'min': np.min(predictions),
        'max': np.max(predictions),
        'mean': np.mean(predictions),
        'total': np.sum(predictions),
        'morning_peak': np.mean(predictions[7:10]),
        'evening_peak': np.mean(predictions[18:23]),
        'night': np.mean(predictions[0:6])
    }

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
    markup.add('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–µ–π', '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
    
    welcome_text = """
ü§ñ *–ë–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è*

–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"* —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 24 —á–∞—Å–∞.

*–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞:* 92.4%
*–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å:* LightGBM
    """
    
    bot.send_message(message.chat.id, welcome_text, 
                   reply_markup=markup, parse_mode='Markdown')

@bot.message_handler(commands=['help'])
def send_help(message):
    """–ü–æ–º–æ—â—å"""
    help_text = """
‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
2. –ü–æ–ª—É—á–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∏ –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏

*–ú–æ–¥–µ–ª–∏:*
‚Ä¢ LightGBM - 92.4% —Ç–æ—á–Ω–æ—Å—Ç–∏
‚Ä¢ XGBoost - 92.2% —Ç–æ—á–Ω–æ—Å—Ç–∏  
‚Ä¢ RandomForest - 90.6% —Ç–æ—á–Ω–æ—Å—Ç–∏

*–î–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è:*
6 –º–µ—Å—è—Ü–µ–≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
    """
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

@bot.message_handler(commands=['stats'])
def send_stats(message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–µ–π"""
    stats_text = """
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–µ–π*

*LightGBM* üöÄ (–æ—Å–Ω–æ–≤–Ω–∞—è)
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: 92.4%
‚Ä¢ –û—à–∏–±–∫–∞: 0.11 –∫–í—Ç
‚Ä¢ –û–±—É—á–µ–Ω–∞ –Ω–∞ 260k+ –∑–∞–ø–∏—Å—è—Ö

*XGBoost* ‚ö°
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: 92.2%
‚Ä¢ –û—à–∏–±–∫–∞: 0.11 –∫–í—Ç

*RandomForest* üå≤
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: 90.6%
‚Ä¢ –û—à–∏–±–∫–∞: 0.12 –∫–í—Ç

–í—Å–µ –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã –Ω–∞ 6-–º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –º–∏–Ω—É—Ç–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º.
    """
    bot.send_message(message.chat.id, stats_text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫"""
    if message.text == 'üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞':
        generate_tomorrow_prediction(message)
    elif message.text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–µ–π':
        send_stats(message)
    elif message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        send_help(message)
    else:
        # –ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        send_welcome(message)

def generate_tomorrow_prediction(message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    try:
        bot.send_message(message.chat.id, "‚è≥ *–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞...*", parse_mode='Markdown')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        hours, predictions, model_name, day_of_week, month = generate_tomorrow_predictions()
        metrics = calculate_metrics(predictions)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plot_buf = create_tomorrow_plot(hours, predictions, model_name)
        
        # –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –∏ –º–µ—Å—è—Ü–µ–≤
        day_names = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü—É", "—Å—É–±–±–æ—Ç—É", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        month_names = ["", "—è–Ω–≤–∞—Ä–µ", "—Ñ–µ–≤—Ä–∞–ª–µ", "–º–∞—Ä—Ç–µ", "–∞–ø—Ä–µ–ª–µ", "–º–∞–µ", "–∏—é–Ω–µ", 
                      "–∏—é–ª–µ", "–∞–≤–≥—É—Å—Ç–µ", "—Å–µ–Ω—Ç—è–±—Ä–µ", "–æ–∫—Ç—è–±—Ä–µ", "–Ω–æ—è–±—Ä–µ", "–¥–µ–∫–∞–±—Ä–µ"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        metrics_text = f"""
üìä *–ü–†–û–ì–ù–û–ó –ù–ê –ó–ê–í–¢–†–ê* ({day_names[day_of_week].capitalize()}, {month_names[month]})

*–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:*
‚Ä¢ üéØ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞: *{metrics['mean']:.2f} –∫–í—Ç*
‚Ä¢ üìà –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: *{metrics['max']:.2f} –∫–í—Ç*
‚Ä¢ üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: *{metrics['min']:.2f} –∫–í—Ç*
‚Ä¢ üîã –°—É–º–º–∞—Ä–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: *{metrics['total']:.2f} –∫–í—Ç¬∑—á*

*–ü–∏–∫–æ–≤—ã–µ –ø–µ—Ä–∏–æ–¥—ã:*
‚Ä¢ üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–∫ (7-9): *{metrics['morning_peak']:.2f} –∫–í—Ç*
‚Ä¢ üåá –í–µ—á–µ—Ä–Ω–∏–π –ø–∏–∫ (18-22): *{metrics['evening_peak']:.2f} –∫–í—Ç* 
‚Ä¢ üåô –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (0-5): *{metrics['night']:.2f} –∫–í—Ç*

üí° *–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: 92.4%*
ü§ñ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name.upper()}*
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ –º–µ—Ç—Ä–∏–∫–∏
        bot.send_photo(message.chat.id, plot_buf, caption=metrics_text, parse_mode='Markdown')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('üìä –ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑', 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        
        bot.send_message(
            message.chat.id,
            "üîÑ *–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø—Ä–æ–≥–Ω–æ–∑?*",
            reply_markup=markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        error_text = f"""
‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞*

–û—à–∏–±–∫–∞: {str(e)}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        bot.send_message(message.chat.id, error_text, parse_mode='Markdown')
        print(f"Error in generate_tomorrow_prediction: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è...")
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()