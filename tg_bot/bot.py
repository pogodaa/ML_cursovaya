# bot.py 
import telebot
import pandas as pd
import joblib
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import io
import json
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = telebot.TeleBot(BOT_TOKEN)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ –ø—Ä–∏–∑–Ω–∞–∫–∏
model = joblib.load('models/lightgbm_model.pkl')
with open('models/feature_names.json', 'r', encoding='utf-8') as f:
    FEATURE_NAMES = json.load(f)

print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –û–∂–∏–¥–∞–µ—Ç {len(FEATURE_NAMES)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

# –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ù–ê –û–°–ù–û–í–ï –í–ê–®–ï–ì–û EDA
HOURLY_AVERAGES = {
    0: 0.778, 1: 0.634, 2: 0.540, 3: 0.517, 4: 0.489, 5: 0.527,
    6: 0.940, 7: 1.518, 8: 1.492, 9: 1.340, 10: 1.200, 11: 1.102,
    12: 1.054, 13: 1.000, 14: 1.040, 15: 0.996, 16: 0.949, 17: 1.068,
    18: 1.502, 19: 2.069, 20: 2.066, 21: 2.182, 22: 1.667, 23: 1.081
}

HOURLY_STD = {
    0: 0.935, 1: 0.769, 2: 0.681, 3: 0.616, 4: 0.588, 5: 0.634,
    6: 1.092, 7: 1.137, 8: 1.057, 9: 0.948, 10: 0.994, 11: 1.000,
    12: 1.098, 13: 1.056, 14: 1.045, 15: 1.060, 16: 0.967, 17: 1.067,
    18: 1.331, 19: 1.600, 20: 1.544, 21: 1.466, 22: 1.236, 23: 1.009
}

# –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –º–µ—Å—è—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
SEASONAL_FACTORS = {
    1: 1.33,  # –Ø–Ω–≤–∞—Ä—å +33%
    2: 1.21,  # –§–µ–≤—Ä–∞–ª—å +21%
    3: 1.14,  # –ú–∞—Ä—Ç +14%
    4: 0.75,  # –ê–ø—Ä–µ–ª—å -25%
    5: 0.85,  # –ú–∞–π -15%
    6: 0.72,  # –ò—é–Ω—å -28%
    7: 0.70,  # –ò—é–ª—å -30% (–æ—Ü–µ–Ω–∫–∞)
    8: 0.70,  # –ê–≤–≥—É—Å—Ç -30% (–æ—Ü–µ–Ω–∫–∞)
    9: 0.80,  # –°–µ–Ω—Ç—è–±—Ä—å -20% (–æ—Ü–µ–Ω–∫–∞)
    10: 0.90, # –û–∫—Ç—è–±—Ä—å -10% (–æ—Ü–µ–Ω–∫–∞)
    11: 1.10, # –ù–æ—è–±—Ä—å +10% (–æ—Ü–µ–Ω–∫–∞)
    12: 1.25  # –î–µ–∫–∞–±—Ä—å +25% (–æ—Ü–µ–Ω–∫–∞)
}

def create_realistic_lags(hour, day_of_week, month):
    """–°–æ–∑–¥–∞–µ—Ç –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –ª–∞–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ EDA"""
    
    # –ë–∞–∑–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞
    base_consumption = HOURLY_AVERAGES[hour]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ–∑–æ–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    seasonal_factor = SEASONAL_FACTORS.get(month, 1.0)
    base_consumption *= seasonal_factor
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö (–Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ +36.6%)
    if day_of_week >= 5:  # –°—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        base_consumption *= 1.15  # +15% –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö
    
    features = {}
    
    # –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –õ–ê–ì–ò —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
    features['lag_2h_ago'] = HOURLY_AVERAGES[(hour - 2) % 24] * seasonal_factor
    features['lag_6h_ago'] = HOURLY_AVERAGES[(hour - 6) % 24] * seasonal_factor
    features['lag_12h_ago'] = HOURLY_AVERAGES[(hour - 12) % 24] * seasonal_factor
    features['lag_same_day_24h'] = base_consumption  # –í—á–µ—Ä–∞ –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è
    features['lag_week_ago_168h'] = base_consumption  # –ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥
    
    return features, base_consumption

def create_realistic_rolling_stats(hour, base_consumption):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ 3 —á–∞—Å–∞ (—Ç–µ–∫—É—â–∏–π + 2 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö)
    recent_hours = [HOURLY_AVERAGES[(hour - i) % 24] for i in range(3)]
    rolling_3h = np.mean(recent_hours)
    
    # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ 24 —á–∞—Å–∞
    rolling_24h = np.mean(list(HOURLY_AVERAGES.values()))
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞
    rolling_24h_std = np.std(list(HOURLY_AVERAGES.values()))
    
    # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ 7 –¥–Ω–µ–π
    rolling_7d = rolling_24h  # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–Ω–µ–≤–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
    
    return {
        'rolling_mean_3h_past': rolling_3h,
        'rolling_mean_24h_past': rolling_24h,
        'rolling_std_24h_past': rolling_24h_std,
        'rolling_mean_7d_past': rolling_7d
    }

def create_realistic_sub_metering(hour, day_of_week, month):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—É–±-—Å—á–µ—Ç—á–∏–∫–æ–≤"""
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—É—Ö–Ω–∏ (—É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º)
    kitchen_active = 1 if (7 <= hour <= 9) or (18 <= hour <= 20) else 0
    kitchen_ratio = 0.25 if kitchen_active else 0.05
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∞—á–µ—á–Ω–æ–π (–¥–Ω–µ–º –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ)
    laundry_active = 1 if (10 <= hour <= 18) and (day_of_week >= 5) else 0
    laundry_ratio = 0.15 if laundry_active else 0.03
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–º–∞—Ç-—Å–∏—Å—Ç–µ–º (–≤–µ—á–µ—Ä–æ–º –∑–∏–º–æ–π)
    ac_heating_active = 1 if (18 <= hour <= 22) and (month in [1, 2, 12]) else 0
    ac_heating_ratio = 0.35 if ac_heating_active else 0.08
    
    return {
        'kitchen_ratio': kitchen_ratio,
        'laundry_ratio': laundry_ratio,
        'ac_heating_ratio': ac_heating_ratio,
        'kitchen_active': kitchen_active,
        'laundry_active': laundry_active,
        'ac_heating_active': ac_heating_active
    }

def create_prediction_features(hour, day_of_week, month):
    """–°–æ–∑–¥–∞–µ—Ç –í–°–ï 49 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ú–ò –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    
    features = {}
    
    # 1. –¶–ò–ö–õ–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ó–ù–ê–ö–ò
    features['hour_sin'] = np.sin(2 * np.pi * hour / 24)
    features['hour_cos'] = np.cos(2 * np.pi * hour / 24)
    features['month_sin'] = np.sin(2 * np.pi * month / 12)
    features['month_cos'] = np.cos(2 * np.pi * month / 12)
    features['day_of_week_sin'] = np.sin(2 * np.pi * day_of_week / 7)
    features['day_of_week_cos'] = np.cos(2 * np.pi * day_of_week / 7)
    
    # 2. –°–£–¢–û–ß–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ –ò–ó EDA
    features['is_early_morning'] = 1 if 4 <= hour <= 6 else 0
    features['is_midday'] = 1 if 10 <= hour <= 16 else 0
    features['is_late_evening'] = 1 if 21 <= hour <= 23 else 0
    features['is_evening_peak'] = 1 if 18 <= hour <= 22 else 0
    features['is_morning_peak'] = 1 if 7 <= hour <= 9 else 0
    features['is_night'] = 1 if 0 <= hour <= 5 else 0
    features['is_deep_night'] = 1 if 1 <= hour <= 4 else 0
    
    # 3. –ù–ï–î–ï–õ–¨–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ –ò–ó EDA
    features['is_monday'] = 1 if day_of_week == 0 else 0
    features['is_friday'] = 1 if day_of_week == 4 else 0
    features['is_sunday'] = 1 if day_of_week == 6 else 0
    features['is_week_start'] = 1 if day_of_week in [0, 1] else 0
    features['is_week_end'] = 1 if day_of_week in [4, 5] else 0
    features['weekend_evening_boost'] = 1 if (day_of_week >= 5 and 18 <= hour <= 22) else 0
    features['weekend_morning'] = 1 if (day_of_week >= 5 and 7 <= hour <= 9) else 0
    
    # 4. –°–ï–ó–û–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ –ò–ó EDA
    features['is_high_season'] = 1 if month in [1, 2, 12] else 0
    features['is_low_season'] = 1 if month in [6, 7, 8] else 0
    features['is_spring'] = 1 if month in [3, 4, 5] else 0
    
    # 5. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–ï–†–ï–•–û–î–´ –ò–ó EDA
    features['morning_surge_6_7'] = 1 if 6 <= hour <= 7 else 0
    features['evening_surge_17_18'] = 1 if 17 <= hour <= 18 else 0
    features['evening_drop_22_23'] = 1 if 22 <= hour <= 23 else 0
    
    # 6. –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –ü–†–ò–ó–ù–ê–ö–û–í
    features['winter_evening'] = 1 if (month in [1, 2, 12] and 18 <= hour <= 22) else 0
    features['summer_afternoon'] = 1 if (month in [6, 7, 8] and 10 <= hour <= 16) else 0
    features['workday_evening'] = 1 if (day_of_week < 5 and 18 <= hour <= 22) else 0
    features['sunday_evening'] = 1 if (day_of_week == 6 and 18 <= hour <= 22) else 0
    
    # 7. –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –õ–ê–ì–ò
    lag_features, base_consumption = create_realistic_lags(hour, day_of_week, month)
    features.update(lag_features)
    
    # 8. –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –°–ö–û–õ–¨–ó–Ø–©–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò
    rolling_features = create_realistic_rolling_stats(hour, base_consumption)
    features.update(rolling_features)
    
    # 9. –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –°–£–ë-–°–ß–ï–¢–ß–ò–ö–ò
    sub_metering_features = create_realistic_sub_metering(hour, day_of_week, month)
    features.update(sub_metering_features)
    
    # 10. –ë–ê–ó–û–í–´–ï –ü–†–ò–ó–ù–ê–ö–ò
    features['hour'] = hour
    features['day_of_week'] = day_of_week
    features['month'] = month
    features['is_weekend'] = 1 if day_of_week >= 5 else 0
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –≤ –¢–û–ß–ù–û–ú –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    ordered_features = {name: features[name] for name in FEATURE_NAMES}
    
    print(f"üîç –°–æ–∑–¥–∞–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è {hour:02d}:00 - –ª–∞–≥_2—á: {features['lag_2h_ago']:.3f} –∫–í—Ç")
    
    return pd.DataFrame([ordered_features])

def validate_prediction(prediction, hour):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ EDA —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç–∏"""
    # –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –¥–∏–∞–ø–∞–∑–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ EDA (—Å —É—á–µ—Ç–æ–º std)
    realistic_ranges = {
        # (min, max) —Å —É—á–µ—Ç–æ–º ¬±2 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
        0: (0.2, 2.5), 1: (0.1, 2.0), 2: (0.1, 1.8), 3: (0.1, 1.7),
        4: (0.1, 1.6), 5: (0.1, 1.7), 6: (0.2, 2.8), 7: (0.5, 3.5),
        8: (0.5, 3.3), 9: (0.4, 3.0), 10: (0.3, 2.8), 11: (0.2, 2.7),
        12: (0.2, 2.8), 13: (0.2, 2.6), 14: (0.2, 2.6), 15: (0.2, 2.6),
        16: (0.2, 2.4), 17: (0.3, 2.8), 18: (0.5, 3.8), 19: (0.8, 4.5),
        20: (0.8, 4.5), 21: (1.0, 4.8), 22: (0.6, 3.8), 23: (0.3, 2.8)
    }
    
    min_val, max_val = realistic_ranges[hour]
    is_realistic = min_val <= prediction <= max_val
    
    if not is_realistic:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–≥–Ω–æ–∑ {prediction:.2f} –∫–í—Ç –≤ {hour:02d}:00 –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã ({min_val:.1f}-{max_val:.1f})")
        # –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è - –∫ –±–ª–∏–∂–∞–π—à–µ–π –≥—Ä–∞–Ω–∏—Ü–µ
        if prediction < min_val:
            correction = min_val
        else:
            correction = max_val
        return correction, is_realistic
    
    return prediction, is_realistic

def predict_24_hours():
    """–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞ —Å –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ú–ò –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏"""
    tomorrow = datetime.now() + timedelta(days=1)
    day_of_week = tomorrow.weekday()
    month = tomorrow.month
    
    predictions = []
    validation_results = []
    
    print(f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {tomorrow.strftime('%d.%m.%Y')} ({['–ø–Ω','–≤—Ç','—Å—Ä','—á—Ç','–ø—Ç','—Å–±','–≤—Å'][day_of_week]})")
    
    for hour in range(24):
        # –°–æ–∑–¥–∞–µ–º –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Å–∞
        features_df = create_prediction_features(hour, day_of_week, month)
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º
        prediction = model.predict(features_df)[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        validated_prediction, is_realistic = validate_prediction(prediction, hour)
        predictions.append(validated_prediction)
        validation_results.append(is_realistic)
        
        status = "‚úÖ" if is_realistic else "‚ö†Ô∏è"
        print(f"  {status} –ß–∞—Å {hour:2d}: {validated_prediction:.2f} –∫–í—Ç ({'—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ' if is_realistic else '—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ'})")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    realistic_count = sum(validation_results)
    print(f"üìä –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {realistic_count}/24 ({realistic_count/24*100:.1f}%)")
    
    return list(range(24)), predictions, day_of_week, month, realistic_count

def create_enhanced_plot(hours, predictions, date_str, realistic_count):
    """–°–æ–∑–¥–∞–µ—Ç –£–õ–£–ß–®–ï–ù–ù–´–ô –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    plt.figure(figsize=(14, 8))
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
    plt.plot(hours, predictions, 'b-', linewidth=3, marker='o', markersize=5, label='–ü—Ä–æ–≥–Ω–æ–∑')
    
    # –§–æ–Ω–æ–≤–∞—è –ª–∏–Ω–∏—è —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    avg_line = [HOURLY_AVERAGES[h] for h in hours]
    plt.plot(hours, avg_line, 'g--', alpha=0.7, linewidth=1, label='–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è')
    
    # –ó–æ–Ω—ã –ø–∏–∫–æ–≤ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
    plt.axvspan(7, 9, alpha=0.15, color='orange', label='–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–∫')
    plt.axvspan(18, 22, alpha=0.15, color='red', label='–í–µ—á–µ—Ä–Ω–∏–π –ø–∏–∫')
    plt.axvspan(0, 5, alpha=0.1, color='blue', label='–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è')
    
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥ –∫—Ä–∏–≤–æ–π
    plt.fill_between(hours, predictions, alpha=0.2, color='blue')
    
    plt.title(f'–ü—Ä–æ–≥–Ω–æ–∑ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –Ω–∞ {date_str}\n(–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: 92.4%)', 
              fontsize=14, fontweight='bold', pad=20)
    plt.xlabel('–ß–∞—Å –¥–Ω—è', fontsize=12)
    plt.ylabel('–ù–∞–≥—Ä—É–∑–∫–∞ (–∫–í—Ç)', fontsize=12)
    plt.grid(True, alpha=0.3)
    plt.legend(loc='upper left')
    plt.xticks(range(0, 24, 2))
    plt.ylim(bottom=0)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–∏–∫–æ–≤
    peak_hour = hours[np.argmax(predictions)]
    peak_value = np.max(predictions)
    plt.annotate(f'–ü–∏–∫: {peak_value:.1f} –∫–í—Ç', 
                xy=(peak_hour, peak_value), 
                xytext=(peak_hour, peak_value + 0.3),
                arrowprops=dict(arrowstyle='->', color='red'),
                ha='center', fontweight='bold')
    
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=120, bbox_inches='tight')
    buf.seek(0)
    plt.close()
    
    return buf

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = """
ü§ñ *–ë–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø*

*–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:*
‚Ä¢ üéØ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤  
‚Ä¢ üîç –£—á–µ—Ç —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ –∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
‚Ä¢ üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏

*–ö–æ–º–∞–Ω–¥—ã:*
/predict - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (24 —á–∞—Å–∞)
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–µ–π
/patterns - –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è

*–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:* 92.4%
*–ú–æ–¥–µ–ª—å:* LightGBM
*–ü—Ä–∏–∑–Ω–∞–∫–æ–≤:* 49
    """
    bot.send_message(message.chat.id, welcome_text, parse_mode='Markdown')

@bot.message_handler(commands=['predict'])
def send_prediction(message):
    try:
        bot.send_message(message.chat.id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ô –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞...")
        
        hours, predictions, day_of_week, month, realistic_count = predict_24_hours()
        
        tomorrow = datetime.now() + timedelta(days=1)
        date_str = tomorrow.strftime('%d.%m.%Y')
        
        # –°–æ–∑–¥–∞–µ–º –£–õ–£–ß–®–ï–ù–ù–´–ô –≥—Ä–∞—Ñ–∏–∫
        plot_buf = create_enhanced_plot(hours, predictions, date_str, realistic_count)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        avg = np.mean(predictions)
        peak = np.max(predictions)
        peak_hour = hours[np.argmax(predictions)]
        min_val = np.min(predictions)
        min_hour = hours[np.argmin(predictions)]
        total = np.sum(predictions)
        
        day_names = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü—É", "—Å—É–±–±–æ—Ç—É", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        month_names = ["—è–Ω–≤–∞—Ä–µ", "—Ñ–µ–≤—Ä–∞–ª–µ", "–º–∞—Ä—Ç–µ", "–∞–ø—Ä–µ–ª–µ", "–º–∞–µ", "–∏—é–Ω–µ", 
                      "–∏—é–ª–µ", "–∞–≤–≥—É—Å—Ç–µ", "—Å–µ–Ω—Ç—è–±—Ä–µ", "–æ–∫—Ç—è–±—Ä–µ", "–Ω–æ—è–±—Ä–µ", "–¥–µ–∫–∞–±—Ä–µ"]
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        morning_peak = np.mean(predictions[7:10])
        evening_peak = np.mean(predictions[18:23])
        night_avg = np.mean(predictions[0:6])
        
        caption = f"""üìä *–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {date_str}* ({day_names[day_of_week]}, {month_names[month-1]})

*–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:*
‚Ä¢ üìà –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞: {avg:.2f} –∫–í—Ç
‚Ä¢ üöÄ –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {peak:.2f} –∫–í—Ç –≤ {peak_hour}:00
‚Ä¢ üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {min_val:.2f} –∫–í—Ç –≤ {min_hour}:00
‚Ä¢ üîã –°—É–º–º–∞—Ä–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {total:.1f} –∫–í—Ç¬∑—á

*–ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:*
‚Ä¢ üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–∏–∫ (7-9): {morning_peak:.2f} –∫–í—Ç
‚Ä¢ üåá –í–µ—á–µ—Ä–Ω–∏–π –ø–∏–∫ (18-22): {evening_peak:.2f} –∫–í—Ç  
‚Ä¢ üåô –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (0-5): {night_avg:.2f} –∫–í—Ç

*–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–∞:*
‚Ä¢ ‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {realistic_count}/24
‚Ä¢ ü§ñ –ú–æ–¥–µ–ª—å: LightGBM (92.4% —Ç–æ—á–Ω–æ—Å—Ç—å)
‚Ä¢ üîç –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: 49 (—Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ª–∞–≥–∞–º–∏)"""

        bot.send_photo(message.chat.id, plot_buf, caption=caption, parse_mode='Markdown')
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}"
        print(error_msg)
        bot.send_message(message.chat.id, error_msg)

@bot.message_handler(commands=['stats'])
def send_stats(message):
    stats_text = """
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø*

*LightGBM (–ª—É—á—à–∞—è –º–æ–¥–µ–ª—å)*
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å (R¬≤): 92.4%
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ (MAE): 0.11 –∫–í—Ç (110 –í—Ç)
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: 4.45 –∫–í—Ç
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: 49

*–í–∞–∂–Ω–µ–π—à–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:*
1. `lag_2h_ago` (59.3%) - –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
2. `ac_heating_active` (8.3%) - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–º–∞—Ç-—Å–∏—Å—Ç–µ–º  
3. `is_night` (5.6%) - –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
4. `ac_heating_ratio` (2.8%) - –¥–æ–ª—è –∫–ª–∏–º–∞—Ç-—Å–∏—Å—Ç–µ–º
5. `kitchen_ratio` (2.2%) - –¥–æ–ª—è –∫—É—Ö–Ω–∏

*–î–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è:*
‚Ä¢ –ü–µ—Ä–∏–æ–¥: 6 –º–µ—Å—è—Ü–µ–≤ (—è–Ω–≤–∞—Ä—å-–∏—é–Ω—å 2007)
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: 1 –º–∏–Ω—É—Ç–∞
‚Ä¢ –û–±—ä–µ–º: 260,640 –∏–∑–º–µ—Ä–µ–Ω–∏–π
‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∏: 1.01% (–æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã)

*–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*
‚Ä¢ –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å: —É—á—Ç–µ–Ω–∞ (+74% –∑–∏–º–∞/–ª–µ—Ç–æ)
‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã–µ: +36.6% –∫ —Ä–∞–±–æ—á–∏–º –¥–Ω—è–º
‚Ä¢ –ü–∏–∫–∏: —É—Ç—Ä–µ–Ω–Ω–∏–π (7-9), –≤–µ—á–µ—Ä–Ω–∏–π (18-22)
    """
    bot.send_message(message.chat.id, stats_text, parse_mode='Markdown')

@bot.message_handler(commands=['patterns'])
def send_patterns(message):
    patterns_text = """
üîç *–ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö*

*–°—É—Ç–æ—á–Ω—ã–µ —Ü–∏–∫–ª—ã:*
‚Ä¢ üåô –ù–æ—á–Ω–æ–π –º–∏–Ω–∏–º—É–º: 0.49 –∫–í—Ç (4:00)
‚Ä¢ üöÄ –í–µ—á–µ—Ä–Ω–∏–π –º–∞–∫—Å–∏–º—É–º: 2.18 –∫–í—Ç (21:00) 
‚Ä¢ üìà –£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–æ—Å—Ç: +0.58 –∫–í—Ç (6‚Üí7)
‚Ä¢ üìâ –í–µ—á–µ—Ä–Ω–∏–π —Å–ø–∞–¥: -0.59 –∫–í—Ç (22‚Üí23)

*–ù–µ–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:*
‚Ä¢ üìÖ –†–∞–±–æ—á–∏–µ –¥–Ω–∏: 1.05 –∫–í—Ç (—Å—Ä–µ–¥–Ω–µ–µ)
‚Ä¢ üéâ –í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏: 1.43 –∫–í—Ç (+36.6%)
‚Ä¢ üìä –ù–∞–∏–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π: –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
‚Ä¢ üìä –ù–∞–∏–±–æ–ª–µ–µ –∏–∑–º–µ–Ω—á–∏–≤—ã–π: –í—Ç–æ—Ä–Ω–∏–∫

*–°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è:*
‚Ä¢ ‚ùÑÔ∏è –ó–∏–º–∞: 1.47 –∫–í—Ç (–º–∞–∫—Å–∏–º—É–º)
‚Ä¢ üå∑ –í–µ—Å–Ω–∞: 1.06 –∫–í—Ç 
‚Ä¢ ‚òÄÔ∏è –õ–µ—Ç–æ: 0.83 –∫–í—Ç (–º–∏–Ω–∏–º—É–º)
‚Ä¢ üìâ –ê–º–ø–ª–∏—Ç—É–¥–∞: -43.9% (–∑–∏–º–∞‚Üí–ª–µ—Ç–æ)

*–ü–∏–∫–æ–≤—ã–µ –ø–µ—Ä–∏–æ–¥—ã:*
‚Ä¢ üåÖ –£—Ç—Ä–æ: 7:00-9:00 (1.45 –∫–í—Ç)
‚Ä¢ üåá –í–µ—á–µ—Ä: 18:00-22:00 (1.90 –∫–í—Ç)
‚Ä¢ üåô –ù–æ—á—å: 0:00-5:00 (0.58 –∫–í—Ç)
    """
    bot.send_message(message.chat.id, patterns_text, parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    help_text = """
ü§ñ –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/predict - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ–ª–∏  
/patterns - —É–∑–Ω–∞—Ç—å –æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ú–æ—è –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å 92.4%! üöÄ
    """
    bot.send_message(message.chat.id, help_text)

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ú–ò –ü–†–ò–ó–ù–ê–ö–ê–ú–ò!")
    print("‚úÖ –ú–æ–¥–µ–ª—å: LightGBM")
    print("‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: 49")
    print("‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ª–∞–≥–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    print("üìä –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã /predict")
    bot.infinity_polling()