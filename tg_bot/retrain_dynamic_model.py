import pandas as pd
import numpy as np
import joblib
from lightgbm import LGBMRegressor
from sklearn.metrics import mean_absolute_error, r2_score
import json

print("=== –ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–ï –° –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ú–ò –ü–†–ò–ó–ù–ê–ö–ê–ú–ò ===")

# –ó–∞–≥—Ä—É–∑–∏ –¥–∞–Ω–Ω—ã–µ
df = pd.read_csv('df/obr.csv', parse_dates=['datetime'], index_col='datetime')
print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} –∑–∞–ø–∏—Å–µ–π")

# –°–û–ó–î–ê–ï–ú –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ó–ù–ê–ö–ò –ë–ï–ó –£–¢–ï–ß–ï–ö
def create_dynamic_features(df):
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ë–ï–ó —É—Ç–µ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö"""
    
    # 1. –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    df['hour_sin'] = np.sin(2 * np.pi * df['hour'] / 24)
    df['hour_cos'] = np.cos(2 * np.pi * df['hour'] / 24)
    df['month_sin'] = np.sin(2 * np.pi * df['month'] / 12)
    df['month_cos'] = np.cos(2 * np.pi * df['month'] / 12)
    df['day_of_week_sin'] = np.sin(2 * np.pi * df['day_of_week'] / 7)
    df['day_of_week_cos'] = np.cos(2 * np.pi * df['day_of_week'] / 7)
    
    # 2. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ EDA
    df['is_evening_peak'] = ((df['hour'] >= 18) & (df['hour'] <= 22)).astype(int)
    df['is_morning_peak'] = ((df['hour'] >= 7) & (df['hour'] <= 9)).astype(int)
    df['is_night'] = ((df['hour'] >= 0) & (df['hour'] <= 5)).astype(int)
    df['is_weekend'] = (df['day_of_week'] >= 5).astype(int)
    
    # 3. –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –í–†–ï–ú–ï–ù–ò –ò –î–ù–Ø –ù–ï–î–ï–õ–ò - –ö–õ–Æ–ß–ï–í–û–ô –ü–†–ò–ó–ù–ê–ö!
    df['weekday_morning'] = ((df['day_of_week'] < 5) & (df['is_morning_peak'] == 1)).astype(int)
    df['weekday_evening'] = ((df['day_of_week'] < 5) & (df['is_evening_peak'] == 1)).astype(int)
    df['weekend_morning'] = ((df['day_of_week'] >= 5) & (df['is_morning_peak'] == 1)).astype(int)
    df['weekend_evening'] = ((df['day_of_week'] >= 5) & (df['is_evening_peak'] == 1)).astype(int)
    
    # 4. –°–ï–ó–û–ù–ù–´–ï –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø
    df['winter_evening'] = ((df['month'].isin([12, 1, 2])) & (df['is_evening_peak'] == 1)).astype(int)
    df['summer_afternoon'] = ((df['month'].isin([6, 7, 8])) & (df['hour'].between(13, 17))).astype(int)
    
    # 5. –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ï –ü–ê–¢–¢–ï–†–ù–´
    df['family_time'] = ((df['hour'].between(18, 22)) & (df['is_weekend'] == 0)).astype(int)
    df['late_night_weekend'] = ((df['hour'].between(23, 2)) & (df['is_weekend'] == 1)).astype(int)
    
    return df

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
df = create_dynamic_features(df)

# –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ó–ù–ê–ö–ò
dynamic_features = [
    # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ
    'hour_sin', 'hour_cos', 'month_sin', 'month_cos', 
    'day_of_week_sin', 'day_of_week_cos',
    
    # –ë–∞–∑–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ
    'hour', 'day_of_week', 'month', 'is_weekend',
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã
    'is_evening_peak', 'is_morning_peak', 'is_night',
    
    # –ö–õ–Æ–ß–ï–í–´–ï - –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –î–ù–Ø –ò –í–†–ï–ú–ï–ù–ò
    'weekday_morning', 'weekday_evening', 'weekend_morning', 'weekend_evening',
    
    # –°–µ–∑–æ–Ω–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    'winter_evening', 'summer_afternoon',
    
    # –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    'family_time', 'late_night_weekend',
    
    # –°—É–±-—Å—á–µ—Ç—á–∏–∫–∏
    'Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'
]

print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(dynamic_features)} –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
X = df[dynamic_features]
y = df['Global_active_power']

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
split_index = int(len(df) * 0.8)
X_train = X.iloc[:split_index]
X_test = X.iloc[split_index:]
y_train = y.iloc[:split_index]
y_test = y.iloc[split_index:]

print(f"üìä –†–∞–∑–º–µ—Ä—ã: train {X_train.shape}, test {X_test.shape}")

# –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
print("üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏...")
model = LGBMRegressor(
    n_estimators=150,
    max_depth=10,
    learning_rate=0.1,
    random_state=42,
    n_jobs=-1,
    verbose=-1
)

model.fit(X_train, y_train)

# –û—Ü–µ–Ω–∫–∞
y_pred_test = model.predict(X_test)
test_mae = mean_absolute_error(y_test, y_pred_test)
test_r2 = r2_score(y_test, y_pred_test)

print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
print(f"Test MAE: {test_mae:.4f} –∫–í—Ç")
print(f"Test R¬≤:  {test_r2:.4f}")

# –¢–ï–°–¢ –†–ê–ó–õ–ò–ß–ò–ô –ú–ï–ñ–î–£ –î–ù–Ø–ú–ò
print(f"\n=== –¢–ï–°–¢ –î–ò–ù–ê–ú–ò–ö–ò ===")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –¥–Ω—è–º–∏
test_days = [
    (0, "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"),
    (4, "–ü—è—Ç–Ω–∏—Ü–∞"), 
    (5, "–°—É–±–±–æ—Ç–∞"),
    (6, "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
]

for day, day_name in test_days:
    # –ë–µ—Ä–µ–º –ø—Ä–∏–º–µ—Ä—ã —ç—Ç–æ–≥–æ –¥–Ω—è –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏
    day_mask = X_test['day_of_week'] == day
    if day_mask.sum() > 0:
        day_predictions = model.predict(X_test[day_mask])
        avg_consumption = day_predictions.mean()
        print(f"  {day_name}: {avg_consumption:.3f} –∫–í—Ç")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
joblib.dump(model, 'models/dynamic_model_lightgbm.pkl')
with open('models/dynamic_feature_names.json', 'w') as f:
    json.dump(dynamic_features, f)

print(f"üíæ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
print(f"üéØ –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≥–Ω–æ–∑—ã –±—É–¥—É—Ç –†–ê–ó–ù–´–ï –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–Ω–µ–π!")