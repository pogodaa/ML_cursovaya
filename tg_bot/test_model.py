import pandas as pd
import joblib
import json
import numpy as np
from sklearn.metrics import mean_absolute_error

print("=== –¢–ï–°–¢ –ú–û–î–ï–õ–ò –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• ===\n")

# –ó–∞–≥—Ä—É–∑–∏ –º–æ–¥–µ–ª—å
model = joblib.load('models/best_model_lightgbm_clean.pkl')
with open('models/feature_names_clean.json', 'r') as f:
    feature_names = json.load(f)

print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –æ–∂–∏–¥–∞–µ—Ç {len(feature_names)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

# –ó–∞–≥—Ä—É–∑–∏ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
df = pd.read_csv('df/obr.csv', parse_dates=['datetime'], index_col='datetime')
print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} –∑–∞–ø–∏—Å–µ–π")

# –ù–£–ñ–ù–û –°–û–ó–î–ê–¢–¨ –ü–†–ò–ó–ù–ê–ö–ò –ö–ê–ö –ü–†–ò –û–ë–£–ß–ï–ù–ò–ò!
print("–°–æ–∑–¥–∞—é –ø—Ä–∏–∑–Ω–∞–∫–∏...")

# 1. –¶–ò–ö–õ–ò–ß–ï–°–ö–ò–ï –ü–†–ò–ó–ù–ê–ö–ò
df['hour_sin'] = np.sin(2 * np.pi * df['hour'] / 24)
df['hour_cos'] = np.cos(2 * np.pi * df['hour'] / 24)
df['month_sin'] = np.sin(2 * np.pi * df['month'] / 12)
df['month_cos'] = np.cos(2 * np.pi * df['month'] / 12)
df['day_of_week_sin'] = np.sin(2 * np.pi * df['day_of_week'] / 7)
df['day_of_week_cos'] = np.cos(2 * np.pi * df['day_of_week'] / 7)

# 2. –ë–ê–ó–û–í–´–ï –ü–ê–¢–¢–ï–†–ù–´ (–¥–æ–±–∞–≤—å —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ)
df['is_evening_peak'] = ((df['hour'] >= 18) & (df['hour'] <= 22)).astype(int)
df['is_morning_peak'] = ((df['hour'] >= 7) & (df['hour'] <= 9)).astype(int)
df['is_night'] = ((df['hour'] >= 0) & (df['hour'] <= 5)).astype(int)
df['is_weekend'] = (df['day_of_week'] >= 5).astype(int)

print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len([col for col in feature_names if col in df.columns])} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ {len(feature_names)}")

# –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –µ—Å—Ç—å, –∞ –∫–∞–∫–∏—Ö –Ω–µ—Ç
missing_features = [f for f in feature_names if f not in df.columns]
print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {len(missing_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {missing_features[:5]}...")

# –í–æ–∑—å–º–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å
available_features = [f for f in feature_names if f in df.columns]
print(f"üîÑ –ë—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {len(available_features)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 1000 –∑–∞–ø–∏—Å—è—Ö
X_test = df[available_features].iloc[-1000:]
y_test = df['Global_active_power'].iloc[-1000:]

print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê ===")

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
predictions = model.predict(X_test)

print(f"–†–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {y_test.mean():.3f} ¬± {y_test.std():.3f} –∫–í—Ç")
print(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:      {predictions.mean():.3f} ¬± {predictions.std():.3f} –∫–í—Ç")
print(f"MAE: {mean_absolute_error(y_test, predictions):.3f} –∫–í—Ç")

# –ü—Ä–æ–≤–µ—Ä—å –¥–∏–∞–ø–∞–∑–æ–Ω
print(f"\n–î–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–∞–ª—å–Ω—ã—Ö:    {y_test.min():.3f} - {y_test.max():.3f} –∫–í—Ç")
print(f"–î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {predictions.min():.3f} - {predictions.max():.3f} –∫–í—Ç")

# –ü—Ä–æ–≤–µ—Ä—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
print(f"\n–ü—Ä–∏–º–µ—Ä—ã (—Ä–µ–∞–ª—å–Ω–æ–µ ‚Üí –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ):")
for i in range(5):
    print(f"  {y_test.iloc[i]:.3f} ‚Üí {predictions[i]:.3f} –∫–í—Ç")

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
print(f"\n=== –ê–ù–ê–õ–ò–ó ===")
if abs(predictions.mean() - y_test.mean()) > 1.0:
    print("‚ùå –°–ï–†–¨–ï–ó–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    print("   –ü—Ä–∏—á–∏–Ω–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
else:
    print("‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")